version 0:96:$full:$large;

function &hsa_iterate_agents (arg_u32 %status) (arg_u64 %call_back, arg_u64 %data);
function &hsa_agent_get_info (arg_u32 %status) (arg_u64 %agent, arg_u32 %attribute, arg_u64 %value);

// Callback function for hsa_iterate_agent 
function &iterate_agent_callback (arg_u32 %status) (arg_u64 %agent, arg_u64 %data)
{
	ld_arg_u64 $d0, [%agent];
	syscall_u64 $d0, 1, $d0, 0, 0;
	ret;
};

function &main ()(){

	// Query the second device, should get type 0
	private_u32 %type;
	{
		arg_u32 %attribute;			// Attribute to query
		st_arg_u32 13, [%attribute];		// Set attribue to 13	

		arg_u64 %type_addr;			// Address to the type variable
		lda_private_u64 $d1, [%type];		// Get address of the type variable
		st_arg_u64 $d1, [%type_addr];		// Store the address in type_addr

		arg_u64 %agent_handler;			// Declare agent handler variable
		st_arg_u64 1, [%agent_handler];		// Set the value to 1

		arg_u32 %err;				// Declare the return argument

		call &hsa_agent_get_info (%err) (%agent_handler, %attribute, %type_addr); // Call runtime function

		ld_private_u32 $s1, [%type];		// Retrieve the content in %type
		syscall_u32 $s1, 1, $s1, 0, 0;		// Print the value of %type
	}

	// Query the second device, should get type 1
	{
		arg_u32 %attribute;			// Attribute to query
		st_arg_u32 13, [%attribute];		// Set attribue to 13	

		arg_u64 %type_addr;			// Address to the type variable
		lda_private_u64 $d1, [%type];		// Get address of the type variable
		st_arg_u64 $d1, [%type_addr];		// Store the address in type_addr

		arg_u64 %agent_handler;			// Declare agent handler variable
		st_arg_u64 2, [%agent_handler];		// Set the value to 1

		arg_u32 %err;				// Declare the return argument

		call &hsa_agent_get_info (%err) (%agent_handler, %attribute, %type_addr); // Call runtime function

		ld_private_u32 $s1, [%type];		// Retrieve the content in %type
		syscall_u32 $s1, 1, $s1, 0, 0;		// Print the value of %type
	}

	// Test hsa_iterate_agent runtime function
	{
		// Prepare callback argument
		arg_u64 %callback;			// Argument for the callback function pointer	
		ldc_u64 $d0, &iterate_agent_callback;	// Get the address of the callback function
		st_arg_u64 $d0, [%callback];		// Store the address of the callback to memory
		
		// Prepare data argument
		arg_u64 %data;				// Declare the data argument
		st_arg_u64 0, [%data];			// Init the value to 0, since we do not use it

		// Prepare the return %status argument
		arg_u32 %err;

		// Call the function
		call &hsa_iterate_agents (%err) (%callback, %data);
	}

	ret;						// Exit
};

